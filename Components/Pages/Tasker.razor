@page "/tasker"

@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JS;


<div class="d-flex align-items-center justify-content-center">
    <div class="task p-5">
        <div class="p-2 text-center mb-3">
            <img src="/img/Tasker_600.png" width="300" alt="Tasker logo" />
        </div>
        <div>
            <EditForm Model="ti" OnValidSubmit="addTask">
                <DataAnnotationsValidator />
                <div class="d-flex flex-row gap-2">
                    <InputText @ref="textBoxTask" class="form-control" placeholder="Enter a task" @bind-Value="ti.Name"></InputText>
                    <button type="submit" class="btn btn-primary">Add</button>
                </div>
                <div>
                    <ValidationMessage style="font-size: 1.1rem;" For="() => ti.Name"></ValidationMessage>
                </div>
            </EditForm>
        </div>

        <hr />

        <div class="vstack">
            @foreach (var LineItem in taskerItems.OrderBy(t => t.IsComplete).ThenBy(t => t.Priority).ThenByDescending(t => t.UpdatedDate))
            {
                <TaskerLine Item="LineItem" OnDeleteCallBack="deleteTask" OnUpdateCallback="updateTask" />
            }
        </div>
    </div>
</div>


@code {
    private TaskerItem ti = new();
    private List<TaskerItem> taskerItems = new();
    private InputText? textBoxTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await textBoxTask!.Element!.Value.FocusAsync();
        }
    }

    private async Task addTask()
    {
        ti.id = Guid.NewGuid();
        taskerItems.Add(ti);
        ti = new();
        await SaveListAsync();
        await textBoxTask!.Element!.Value.FocusAsync();

    }

    private async Task deleteTask(TaskerItem item)
    {
        taskerItems.Remove(item);
        await SaveListAsync();
    }

    private async Task SaveListAsync()
    {
        var taskerItemJson = JsonSerializer.Serialize(taskerItems);
        await JS.InvokeVoidAsync("localStorage.setItem", "TaskerList", taskerItemJson);
    }

    private async Task LoadAsync()
    {
        try
        {
            var taskerItemJson = await JS.InvokeAsync<string>("localStorage.getItem", "TaskerList") ?? "[]";
            taskerItems = JsonSerializer.Deserialize<List<TaskerItem>>(taskerItemJson)!;
        }
        catch
        {
            taskerItems = new();
            await SaveListAsync();
        }
    }

    private async Task updateTask(TaskerItem item)
    {
        item.UpdatedDate = DateTime.Now;
        await SaveListAsync();
    }
}
