
<div class="hstack align-items-center task-item rounded-3 px-2 py-1 gap-1
            @(IsDeadlineToday(Item.Deadline) ? "due-today" : "")"
     style="--shadow-color: @GetShadowColor();">

    <div><InputCheckbox class="form-check-input" @bind-Value="Item.IsComplete" @bind-Value:after="updateItem" /></div>

    <div class="px-2 flex-grow-1">
        <p class="p-0 m-0 task @(Item.IsComplete ? "complete animate" : "")">
            @Item.Name
        </p>
    </div>

    <div>
        <PrioritySelector TaskerItem="Item" OnUpdateCallBack="updateItem" />
    </div>

    <div>
        <button class="btn btn-icon btn-transparent text-danger gradient-hover" @onclick="deleteItem">
            <i class="bi bi-trash-fill" />
        </button>
    </div>
</div>


@code {

    /// <summary>
    /// Tasker item we want to display
    /// </summary>
    [Parameter, EditorRequired]
    public TaskerItem Item { get; set; }

    private bool IsDeadlineToday(DateTime? deadline)
    {
        if (deadline is not DateTime deadlines)
            return false;
        return deadlines.Date == DateTime.Today;
    }


    private string GetShadowColor()
    {
        if (Item.IsComplete)
            return "darkgray";


        if (Item.Priority == Priority.High)
            return "red";
        else if (Item.Priority == Priority.Medium)
            return "#ed8a09";
        else if (Item.Priority == Priority.Low)
            return "var(--bs-info)";
        else
            return "white";
    }


    /// <summary>
    /// Delete item callback
    /// </summary>
    [Parameter]
    public EventCallback<TaskerItem> OnDeleteCallBack { get; set; }

    [Parameter]
    public EventCallback<TaskerItem> OnUpdateCallback { get; set; }

    private async Task deleteItem()
    {
        await OnDeleteCallBack.InvokeAsync(Item);
    }

    private async Task updateItem()
    {
        await OnUpdateCallback.InvokeAsync(Item);
    }

}
